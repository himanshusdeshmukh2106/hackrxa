apiVersion: v1
kind: Namespace
metadata:
  name: llm-query-system
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: app-config
  namespace: llm-query-system
data:
  ENVIRONMENT: "production"
  LOG_LEVEL: "INFO"
  MAX_DOCUMENT_SIZE_MB: "50"
  EMBEDDING_DIMENSION: "384"
  SIMILARITY_THRESHOLD: "0.7"
  MAX_SEARCH_RESULTS: "10"
  MAX_CONTEXT_CHUNKS: "5"
  MIN_CONFIDENCE_THRESHOLD: "0.6"
  RATE_LIMIT_REQUESTS: "100"
  RATE_LIMIT_WINDOW_SECONDS: "3600"
  REQUEST_TIMEOUT_SECONDS: "30"
  RETRY_ATTEMPTS: "3"
  MAX_CHUNK_SIZE: "1000"
  CHUNK_OVERLAP: "200"
---
apiVersion: v1
kind: Secret
metadata:
  name: app-secrets
  namespace: llm-query-system
type: Opaque
data:
  # Base64 encoded values - replace with actual encoded secrets
  PINECONE_API_KEY: cGluZWNvbmVfYXBpX2tleQ==  # Replace with actual key
  GEMINI_API_KEY: Z2VtaW5pX2FwaV9rZXk=        # Replace with actual key
  BEARER_TOKEN: OTFkN2M3ZmNjMDIxZjJmNzZiNGQ0M2M0NDZiNjQzMjE0YzJjMTM5OTAwODU4ODc3OThhNzQ0ZTJjYTY5MmU2OQ==
  DATABASE_URL: cG9zdGdyZXNxbDovL2xsbV91c2VyOmxsbV9wYXNzd29yZEBwb3N0Z3JlczozNTQzMi9sbG1fcXVlcnlfZGI=
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
  namespace: llm-query-system
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
      - name: postgres
        image: postgres:15-alpine
        ports:
        - containerPort: 5432
        env:
        - name: POSTGRES_DB
          value: "llm_query_db"
        - name: POSTGRES_USER
          value: "llm_user"
        - name: POSTGRES_PASSWORD
          value: "llm_password"
        - name: POSTGRES_INITDB_ARGS
          value: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
        volumeMounts:
        - name: postgres-storage
          mountPath: /var/lib/postgresql/data
        - name: init-db
          mountPath: /docker-entrypoint-initdb.d
        livenessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - llm_user
            - -d
            - llm_query_db
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - llm_user
            - -d
            - llm_query_db
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: postgres-storage
        persistentVolumeClaim:
          claimName: postgres-pvc
      - name: init-db
        configMap:
          name: init-db-config
---
apiVersion: v1
kind: Service
metadata:
  name: postgres
  namespace: llm-query-system
spec:
  selector:
    app: postgres
  ports:
  - port: 5432
    targetPort: 5432
  type: ClusterIP
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-pvc
  namespace: llm-query-system
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  namespace: llm-query-system
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
      - name: redis
        image: redis:7-alpine
        ports:
        - containerPort: 6379
        volumeMounts:
        - name: redis-storage
          mountPath: /data
        livenessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: redis-storage
        persistentVolumeClaim:
          claimName: redis-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: redis
  namespace: llm-query-system
spec:
  selector:
    app: redis
  ports:
  - port: 6379
    targetPort: 6379
  type: ClusterIP
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: redis-pvc
  namespace: llm-query-system
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: llm-query-app
  namespace: llm-query-system
spec:
  replicas: 3
  selector:
    matchLabels:
      app: llm-query-app
  template:
    metadata:
      labels:
        app: llm-query-app
    spec:
      containers:
      - name: app
        image: llm-query-system:latest
        ports:
        - containerPort: 8000
        env:
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: app-secrets
              key: DATABASE_URL
        - name: PINECONE_API_KEY
          valueFrom:
            secretKeyRef:
              name: app-secrets
              key: PINECONE_API_KEY
        - name: GEMINI_API_KEY
          valueFrom:
            secretKeyRef:
              name: app-secrets
              key: GEMINI_API_KEY
        - name: BEARER_TOKEN
          valueFrom:
            secretKeyRef:
              name: app-secrets
              key: BEARER_TOKEN
        envFrom:
        - configMapRef:
            name: app-config
        livenessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        volumeMounts:
        - name: app-logs
          mountPath: /app/logs
        - name: app-data
          mountPath: /app/data
      volumes:
      - name: app-logs
        persistentVolumeClaim:
          claimName: app-logs-pvc
      - name: app-data
        persistentVolumeClaim:
          claimName: app-data-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: llm-query-app
  namespace: llm-query-system
spec:
  selector:
    app: llm-query-app
  ports:
  - port: 80
    targetPort: 8000
  type: ClusterIP
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: app-logs-pvc
  namespace: llm-query-system
spec:
  accessModes:
  - ReadWriteMany
  resources:
    requests:
      storage: 5Gi
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: app-data-pvc
  namespace: llm-query-system
spec:
  accessModes:
  - ReadWriteMany
  resources:
    requests:
      storage: 10Gi
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: llm-query-ingress
  namespace: llm-query-system
  annotations:
    kubernetes.io/ingress.class: "nginx"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/rate-limit-window: "1h"
spec:
  tls:
  - hosts:
    - your-domain.com
    secretName: llm-query-tls
  rules:
  - host: your-domain.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: llm-query-app
            port:
              number: 80
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: init-db-config
  namespace: llm-query-system
data:
  init-db.sql: |
    -- Initialize database with required extensions
    CREATE EXTENSION IF NOT EXISTS "uuid-ossp";
    CREATE EXTENSION IF NOT EXISTS "pg_trgm";
    
    -- Create indexes for better performance
    -- These will be created by Alembic migrations, but included here for reference
---
apiVersion: batch/v1
kind: Job
metadata:
  name: db-migration
  namespace: llm-query-system
spec:
  template:
    spec:
      containers:
      - name: migration
        image: llm-query-system:latest
        command: ["alembic", "upgrade", "head"]
        env:
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: app-secrets
              key: DATABASE_URL
        envFrom:
        - configMapRef:
            name: app-config
      restartPolicy: OnFailure
  backoffLimit: 3
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: llm-query-app-hpa
  namespace: llm-query-system
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: llm-query-app
  minReplicas: 2
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80